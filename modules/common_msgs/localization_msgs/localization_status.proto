/******************************************************************************
 * Copyright 2018 The Apollo Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *****************************************************************************/

syntax = "proto2";

package apollo.localization;

// LiDAR-based loclaization module status
enum LocalLidarStatus {
  MSF_LOCAL_LIDAR_NORMAL = 0;       // Localization result satisfy threshold
  MSF_LOCAL_LIDAR_MAP_MISSING = 1;  // Can't find localization map (config.xml)
  MSF_LOCAL_LIDAR_EXTRINSICS_MISSING = 2;  // Missing extrinsic parameters
  MSF_LOCAL_LIDAR_MAP_LOADING_FAILED = 3;  // Fail to load localization map
  MSF_LOCAL_LIDAR_NO_OUTPUT =
      4;  // No output (comparing to timestamp of imu msg)
  MSF_LOCAL_LIDAR_OUT_OF_MAP =
      5;  // Coverage of online pointcloud and map is lower than threshold
  MSF_LOCAL_LIDAR_NOT_GOOD = 6;  // Localization result do not meet threshold
  MSF_LOCAL_LIDAR_UNDEFINED_STATUS = 7;  // others
}

enum LocalLidarQuality {
  MSF_LOCAL_LIDAR_VERY_GOOD = 0;
  MSF_LOCAL_LIDAR_GOOD = 1;
  MSF_LOCAL_LIDAR_NOT_BAD = 2;
  MSF_LOCAL_LIDAR_BAD = 3;
}

// LiDAR-based localization result check (the difference between lidar and sins
// result)
enum LocalLidarConsistency {
  MSF_LOCAL_LIDAR_CONSISTENCY_00 =
      0;  // The difference is less than threshold 1
  MSF_LOCAL_LIDAR_CONSISTENCY_01 =
      1;  // The difference is bigger than threshold 1 but less than threshold 2
  MSF_LOCAL_LIDAR_CONSISTENCY_02 =
      2;  // The difference is bigger than threshold 2
  MSF_LOCAL_LIDAR_CONSISTENCY_03 = 3;  // others
}

// GNSS-based localization result check (the difference between GNSS and sins
// result)
enum GnssConsistency {
  MSF_GNSS_CONSISTENCY_00 = 0;  // The difference is less than threshold 1
  MSF_GNSS_CONSISTENCY_01 =
      1;  // The difference is bigger than threshold 1 but less than threshold 2
  MSF_GNSS_CONSISTENCY_02 = 2;  // The difference is bigger than threshold 2
  MSF_GNSS_CONSISTENCY_03 = 3;  // others
}

enum GnssPositionType {
  NONE = 0;         // No solution
  FIXEDPOS = 1;     // Position has been fixed by the FIX POSITION command or by
                    // position averaging
  FIXEDHEIGHT = 2;  // Position has been fixed by the FIX HEIGHT, or FIX AUTO,
                    // command or by position averaging
  FLOATCONV = 4;    // Solution from floating point carrier phase anbiguities
  WIDELANE = 5;     // Solution from wide-lane ambiguities
  NARROWLANE = 6;   // Solution from narrow-lane ambiguities
  DOPPLER_VELOCITY = 8;  // Velocity computed using instantaneous Doppler
  SINGLE = 16;           // Single point position
  PSRDIFF = 17;          // Pseudorange differential solution
  WAAS = 18;             // Solution calculated using corrections from an SBAS
  PROPOGATED = 19;  // Propagated by a Kalman filter without new observations
  OMNISTAR = 20;    // OmniSTAR VBS position
  L1_FLOAT = 32;    // Floating L1 albiguity solution
  IONOFREE_FLOAT = 33;  // Floating ionospheric free ambiguity solution
  NARROW_FLOAT = 34;    // Floating narrow-lane anbiguity solution
  L1_INT = 48;          // Integer L1 ambiguity solution
  WIDE_INT = 49;        // Integer wide-lane ambiguity solution
  NARROW_INT = 50;      // Integer narrow-lane ambiguity solution
  RTK_DIRECT_INS = 51;  // RTK status where RTK filter is directly initialized
                        // from the INS filter
  INS_SBAS = 52;        // INS calculated position corrected for the antenna
  INS_PSRSP =
      53;  // INS pseudorange single point solution - no DGPS corrections
  INS_PSRDIFF = 54;         // INS pseudorange differential solution
  INS_RTKFLOAT = 55;        // INS RTK float point ambiguities solution
  INS_RTKFIXED = 56;        // INS RTK fixed ambiguities solution
  INS_OMNISTAR = 57;        // INS OmniSTAR VBS solution
  INS_OMNISTAR_HP = 58;     // INS OmniSTAR high precision solution
  INS_OMNISTAR_XP = 59;     // INS OmniSTAR extra precision solution
  OMNISTAR_HP = 64;         // OmniSTAR high precision
  OMNISTAR_XP = 65;         // OmniSTAR extra precision
  PPP_CONVERGING = 68;      // Precise Point Position(PPP) solution converging
  PPP = 69;                 // Precise Point Position(PPP)solution
  INS_PPP_Converging = 73;  // INS NovAtel CORRECT Precise Point Position(PPP)
                            // solution converging
  INS_PPP = 74;   // INS NovAtel CORRECT Precise Point Position(PPP) solution
  MSG_LOSS = 91;  // Gnss position message loss
}

// IMU msg status
enum ImuMsgDelayStatus {
  IMU_DELAY_NORMAL = 0;
  IMU_DELAY_1 = 1;
  IMU_DELAY_2 = 2;
  IMU_DELAY_3 = 3;
  IMU_DELAY_ABNORMAL = 4;
}

enum ImuMsgMissingStatus {
  IMU_MISSING_NORMAL = 0;
  IMU_MISSING_1 = 1;
  IMU_MISSING_2 = 2;
  IMU_MISSING_3 = 3;
  IMU_MISSING_4 = 4;
  IMU_MISSING_5 = 5;
  IMU_MISSING_ABNORMAL = 6;
}

enum ImuMsgDataStatus {
  IMU_DATA_NORMAL = 0;
  IMU_DATA_ABNORMAL = 1;
  IMU_DATA_OTHER = 2;
}

// The running status of localization module
enum MsfRunningStatus {
  MSF_SOL_LIDAR_GNSS = 0;
  MSF_SOL_X_GNSS = 1;
  MSF_SOL_LIDAR_X = 2;
  MSF_SOL_LIDAR_XX = 3;
  MSF_SOL_LIDAR_XXX = 4;
  MSF_SOL_X_X = 5;
  MSF_SOL_X_XX = 6;
  MSF_SOL_X_XXX = 7;
  MSF_SSOL_LIDAR_GNSS = 8;
  MSF_SSOL_X_GNSS = 9;
  MSF_SSOL_LIDAR_X = 10;
  MSF_SSOL_LIDAR_XX = 11;
  MSF_SSOL_LIDAR_XXX = 12;
  MSF_SSOL_X_X = 13;
  MSF_SSOL_X_XX = 14;
  MSF_SSOL_X_XXX = 15;
  MSF_NOSOL_LIDAR_GNSS = 16;
  MSF_NOSOL_X_GNSS = 17;
  MSF_NOSOL_LIDAR_X = 18;
  MSF_NOSOL_LIDAR_XX = 19;
  MSF_NOSOL_LIDAR_XXX = 20;
  MSF_NOSOL_X_X = 21;
  MSF_NOSOL_X_XX = 22;
  MSF_NOSOL_X_XXX = 23;
  MSF_RUNNING_INIT = 24;
  MSF_REINIT_ABNORMALLY = 25;
}

// The status of sensor msg
message MsfSensorMsgStatus {
  optional ImuMsgDelayStatus imu_delay_status = 1;
  optional ImuMsgMissingStatus imu_missing_status = 2;
  optional ImuMsgDataStatus imu_data_status = 3;
}

// The init pose source 
enum MsfInitPoseSource {
    UNKNOWN_SOURCE = 0;
    GNSS_HEADING = 1;
    LOCAL_SEARCH_FROM_INTEGPVA = 2;
    LOCAL_SEARCH_FROM_FILE = 3;
    LOCAL_UPDATE_FROM_FILE = 4;
    USER_INTERACTION = 5;
    INSPVA_RECORD = 6;
    GNSS_VELOCITY = 7;
    GLOBAL_LIDAR = 8;
}

// The status of gnss map offset
enum MsfGnssMapOffsetStatus {
    MSF_LOCAL_GNSS_MAP_OFFSET_NORMAL = 0;
    MSF_LOCAL_GNSS_MAP_OFFSET_ABNORMAL = 1;
}

// The gnss map offset
message MsfGnssMapOffset {
    optional MsfGnssMapOffsetStatus status = 1;
    optional double offsetx = 2;
    optional double offsety = 3;
}

// The init pose status
enum MsfInitPoseStatus { 
    INIT_WAITING = 0;
    INIT_DOING = 1;
    INIT_SUCCESSFUL = 2;
    INIT_FAILED = 3;
    INIT_TERMINATED = 4;
}

// The init details
message MsfInitDetails { 
    optional MsfInitPoseSource init_pose_source = 1;
    optional MsfInitPoseStatus local_search_from_integpva_status = 2;
    optional MsfInitPoseStatus local_search_from_file_status = 3;
    optional MsfInitPoseStatus local_update_from_file_status = 4;
    optional MsfInitPoseStatus user_interaction_status = 5;
    optional int32 gnss_position_type = 6;
    optional MsfInitPoseStatus local_from_global_lidar_status = 7;
}

// The initializaiton status of localization module
enum MSFInitStatus {
    MSF_INIT = 0;
    MSF_ALIGNING = 1;
    MSF_ALIGNED_INIT = 2;
    MSF_ALIGNED_CONVERGED = 3;
    MSF_ALIGNED_CONVERGING = 4;
    MSF_ALIGNED_GOOD = 5;
    MSF_ALIGNED_VALID = 6;
}

// The status of msf localization module
message MsfStatus {
  optional LocalLidarConsistency local_lidar_consistency = 1;
  optional GnssConsistency gnss_consistency = 2;
  optional LocalLidarStatus local_lidar_status = 3;
  optional GnssPositionType gnsspos_position_type = 4;
  optional uint32 heading_position_type = 5;
  optional MSFInitStatus msf_init_status = 6;
  optional MsfRunningStatus msf_running_status = 7;
  optional MsfInitDetails msf_init_details = 8;
  optional LocalLidarQuality local_lidar_quality = 9;
  optional MsfGnssMapOffset gnss_map_offset = 10;
  optional bool lidar_alt_from_map = 11;
  optional double local_lidar_score = 12;
  optional bool local_reliability_status = 13 [default = false];
}
